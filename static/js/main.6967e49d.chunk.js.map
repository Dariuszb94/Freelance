{"version":3,"sources":["components/Tunnel/Tunnel.js","components/Component/Component.js","App.js","reportWebVitals.js","index.js"],"names":["Tunnel","tunnel__inner","useRef","tunnel__outer","useState","jump","jumpSet","offset","offsetSet","useInView","threshold","ref","inView","entry","useEffect","console","log","calcOffset","current","offsetTop","onScroll","e","window","addEventListener","removeEventListener","clientHeight","section","className","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAyCeA,EAnCA,WAAO,IAAD,EACbC,EAAgBC,iBAAO,MACvBC,EAAgBD,iBAAO,MAE7B,EAAwBE,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA+BC,YAAU,CAEvCC,UAAW,IAFLC,EAAR,EAAQA,IAAR,EAAaC,OAAb,EAAqBC,MAsBrB,OAjBAC,qBAAU,WACRC,QAAQC,IAAIT,GACZ,IAAIU,GACDhB,EAAciB,QAAQC,UAAYhB,EAAce,QAAQC,WACzDd,EACIe,EAAW,SAACC,GAChBb,EAAUS,IAIZ,OAFAK,OAAOC,iBAAiB,SAAUH,GAE3B,kBAAME,OAAOE,oBAAoB,SAAUJ,MACjD,CAACb,IACJO,qBAAU,WACRR,EACEH,EAAce,QAAQO,aAAexB,EAAciB,QAAQO,gBAE5D,IAED,cAAC,WAASC,SAAV,GAAkBC,UAAU,SAAShB,IAAKA,GAA1C,oBAAoDR,GAApD,yBACE,qBAAKQ,IAAKV,EAAe0B,UAAU,oBADrC,KC3BWC,G,MAJG,WAChB,OAAO,cAAC,WAASF,QAAV,CAAkBC,UAAU,gBCStBE,MAVf,WACE,OACE,sBAAKF,UAAU,MAAf,UACE,cAAC,EAAD,IAEA,cAAC,EAAD,QCGSG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6967e49d.chunk.js","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from \"react\";\nimport \"./Tunnel.css\";\nimport { useSpring, animated, interpolate } from \"react-spring\";\nimport Aos from \"aos\";\nimport { useInView } from \"react-intersection-observer\";\nimport \"aos/dist/aos.css\";\nconst Tunnel = () => {\n  const tunnel__inner = useRef(null);\n  const tunnel__outer = useRef(null);\n\n  const [jump, jumpSet] = useState(0);\n  const [offset, offsetSet] = useState(0);\n  const { ref, inView, entry } = useInView({\n    /* Optional options */\n    threshold: 0,\n  });\n\n  useEffect(() => {\n    console.log(offset);\n    let calcOffset =\n      (tunnel__inner.current.offsetTop - tunnel__outer.current.offsetTop) /\n      jump;\n    const onScroll = (e) => {\n      offsetSet(calcOffset);\n    };\n    window.addEventListener(\"scroll\", onScroll);\n\n    return () => window.removeEventListener(\"scroll\", onScroll);\n  }, [offset]);\n  useEffect(() => {\n    jumpSet(\n      tunnel__outer.current.clientHeight - tunnel__inner.current.clientHeight\n    );\n  }, []);\n  return (\n    <animated.section className=\"tunnel\" ref={ref} ref={tunnel__outer}>\n      <div ref={tunnel__inner} className=\"tunnel__sticky\"></div>\n    </animated.section>\n  );\n};\n\nexport default Tunnel;\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport \"./Component.css\";\nimport { useSpring, animated, interpolate } from \"react-spring\";\nimport \"aos/dist/aos.css\";\nconst Component = () => {\n  return <animated.section className=\"component\"></animated.section>;\n};\n\nexport default Component;\n","import \"./App.css\";\nimport Tunnel from \"./components/Tunnel/Tunnel\";\nimport Component from \"./components/Component/Component\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Component />\n\n      <Tunnel />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}